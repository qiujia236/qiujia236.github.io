<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wb的博客</title>
    <link>https://qiujia236.github.io/posts/</link>
    <description>Recent content in Posts on wb的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sun, 09 Feb 2020 15:08:24 +0800</lastBuildDate>
    
	<atom:link href="https://qiujia236.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>对Vue数据响应式的理解</title>
      <link>https://qiujia236.github.io/posts/%E5%AF%B9vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 09 Feb 2020 15:08:24 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E5%AF%B9vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>对 Vue 数据响应式的理解 “响应式”，是指当数据改变后，Vue 会通知到使用该数据的代码。例如，视图渲染中使用了数据，数据改变后，视图也会自动更新。Vue 的数据响应主要是依赖了 Object.defineProperty()方法。
我们先来尝试写一个函数，用于改造对象：
function defineReactive (obj,key,val) { Object.defineProperty(obj,key,{ get() { return val; }, set(newVal) { //判断新值与旧值是否相等  //判断的后半段是为了验证新值与旧值都为NaN的情况 NaN不等于自身  if(newVal === val || (newVal !== newVal &amp;amp;&amp;amp; value !== value)){ return ; } val = newVal; } }); } 例如 const obj = {},然后再调用 defineReactive(obj,&amp;lsquo;a&amp;rsquo;,2)方法，此时在函数内，val=2，然后每次获取 obj.a 的值的时候都是获取 val 的值，设置 obj.a 的时候也是设置 val 的值。（每次调用 defineReactive 都会产生一个闭包保存了 val 的值）;
经过验证之后，发现这个函数确实可以使用的。然后我们来讨论一下响应的流程：  输入数据 改造数据（defineReactive()） 如果数据变动 =&amp;gt; 触发事件  Vue 的响应式，核心机制是 观察者模式。</description>
    </item>
    
    <item>
      <title>Vue完整版与运行时版</title>
      <link>https://qiujia236.github.io/posts/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E7%89%88/</link>
      <pubDate>Sat, 08 Feb 2020 16:15:00 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E8%BF%90%E8%A1%8C%E6%97%B6%E7%89%88/</guid>
      <description>Vue 完整版与运行时版 Vue 完整版 在初次使用 vue.js 时，可以看到官方提供了两个版本可以使用，包括 vue.js（完整版）和 vue.runtime.js（运行时版）。  完整版：同时包含编译器和运行时的版本。 编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码。 运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切。  在实际环境中，应当使用运行时版，这是由于 vue.runtime.js 体积更小，在用户网络情况不好时能更快地加载。
我们知道，vue.js 提供了一套模版，使我们能使用 v-if, v-for 之类的语法来编写 html。但是浏览器并不认识 v-if、v-for 之类的模版，需要通过一个模版编译器将这样的模版转换为浏览器认识的 html。所以 vue.js 的渲染逻辑是将模版字符串转换为 html 字符串，在将 html 字符串插入到页面的 html 中实现渲染。
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34; src=&amp;#34;./node_modules/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; new Vue({ el: &amp;#34;#app&amp;#34;, data: { msg: &amp;#34;hello指令系统&amp;#34; }, template: `&amp;lt;h4&amp;gt;{{msg}}&amp;lt;/h4&amp;gt;&amp;gt;` }); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; Vue 运行时版 vue.runtime.js 和 vue.js 的区别在于，vue.runtime.js 不包含模版编译器来获得整个包体积的减少。显然，如果没有模版编译器，上面代码中的模版字符串就没有办法转化为原始的 html 字符串。但是与其将模版字符串在用户端编译，为何不在开发时本地编译好了再发送给用户呢？这样做就节省了 vue.</description>
    </item>
    
    <item>
      <title>浅析MVC</title>
      <link>https://qiujia236.github.io/posts/%E6%B5%85%E6%9E%90mvc/</link>
      <pubDate>Thu, 06 Feb 2020 16:31:19 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E6%B5%85%E6%9E%90mvc/</guid>
      <description>浅析 MVCMVC MVC 模式 概述 MVC 模式的目的是实现一种动态的程式设计，使后续对程序的修改和扩展简化，并且使程序某一部分的重复利用成为可能。除此之外，此模式透过对复杂度的简化，使程序结构更加直观。软件系统透过对自身基本部分分离的同时也赋予了各个基本部分应有的功能：
 控制器（Controller）- 负责转发请求，对请求进行处理。 视图（View） - 界面设计人员进行图形界面设计。 模型（Model） - 程序员编写程序应有的功能（实现算法等等）。  前端的 MVC   前端的 View 是，与页面上元素直接相关的部分都属于 View。包括 html，css 和一部分直接控制页面元素的 JS。作为观察者模式中的观察者，它可以从 Model 中得到数据，并将其显示到页面上。而关于数据的变更和请求，则统统交给 Controller 处理。
  Controller 作为 Model 和 View 的粘合剂，Controller 将 View 方面的请求转发给合适的 Model，在必要的时候也会去更新 View。而 Controller 本身也可以作为 Model 的观察者，获取 Model 的变更。而作为 Controller 本身，就不应该有涉及到页面元素的代码了。
  与后端的沟通、AJAX 请求以及对数据的处理都属于 Model 的工作。Model 本身不知道谁是 View，谁是 Controller。它只提供一些方法供 View 和 Controller 调用，并且将变更通知给它的观察者 View 或 Controller。显然，Model 与页面元素之间也解耦了。</description>
    </item>
    
    <item>
      <title>对前端的理解</title>
      <link>https://qiujia236.github.io/posts/%E5%AF%B9%E5%89%8D%E7%AB%AF%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Sun, 02 Feb 2020 19:14:17 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E5%AF%B9%E5%89%8D%E7%AB%AF%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>对前端的理解 什么是前端 前端它是一个工作，它的工作领域是浏览器，它即要跟美工、设计打交道又要懂点后台代码，知道 ajax 怎么从后台拿数据，接口怎么调用，最主要的是把美工的图合成完成的网页呈现在用户面前，需要实现网页的交互效果。
前端处于设计与后台的中间领域，起到承上启下的作用，这也要求前端工程师的知识面在横向上必须要广。服务器技术要懂，产品与交互也要懂。
它需要掌握三个基本的技能：HTML，CSS， javascript。另外还需要懂点 PHP 或者其他应用在 Web 上的编程语言。
前端工作师主要面向用户、浏览器、数据接口。
前端工程师的价值  让用户更便捷的获取信息； 让前端工作更加规范和标准。  需要掌握的技能  解决浏览器兼容问题； 横向技能面要广； 纵向技能要深。js, css, html5, css3，还有主流的框架要熟悉一两种； 关注用户体验，懂得交互设计。  深入学习前端，需要做很多，前端各类库与框架的架构设计，w3c 各种标准的深入研究，对于 javascript 语言本身的研究，对浏览器的原理分析，对于网络传输协议的原理分析等等。
前端工程师的未来 有越来越多的软件开始在浏览器里运行，随着 google 和火狐的 webos 的发展，甚至在不久的将来，浏览器的 api，会替代操作系统的 sdk 成为软件开发的标准。随着 html5 的发展，浏览器里运行的早已不是简单的页面，而是复杂的 web 应用。前端工程师也早已不是页面制作，而是 web 应用工程师。
学习方法 在我这个阶段的认识来看，我认为学习最靠谱的方法就是积累。有一个很普遍的假象是，互联网时代似乎获取知识越来越容易，很多人都在担忧所谓的信息过剩的问题。然而实际情况却是，我们更加难以捕捉到对我们来说真正有用的信息。而前端的知识相对而言更加零散与碎片化，并且越来越多样化，所以知识的积累则是一个非常重要的过程。
英语很重要，原因是因为国外的技术比我们发达，我们常常需要阅读国外的文章来提升自己，也常常需要在 google 搜索上找到自己问题的答案。</description>
    </item>
    
    <item>
      <title>跨域解析</title>
      <link>https://qiujia236.github.io/posts/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 02 Feb 2020 18:34:18 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E8%B7%A8%E5%9F%9F%E8%A7%A3%E6%9E%90/</guid>
      <description>跨域解析 同源 1995 年，同源政策由 Netscape 公司引入浏览器。目前，所有浏览器都实行这个政策。同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port）。可以说 Web 是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的 javascript 脚本和另外一个域的内容进行交互。
跨域 当一个请求 url 的协议、域名、端口三者之间任意一个与当前页面 url 不同即为跨域
举例来说，http://www.example.com/dir/page.html 这个网址，协议是“http://”，域名是“www.example.com”，端口是80（默认端口可以省略）。它的同源情况如下。
http://www.example.com/dir2/other.html：同源https://www.example.com/dir2/other.html：不同源（协议不同）http://example.com/dir/other.html：不同源（域名不同）http://v2.www.example.com/dir/other.html：不同源（域名不同）http://www.example.com:81/dir/other.html：不同源（端口不同）随着互联网的发展，&amp;ldquo;同源政策&amp;quot;越来越严格。目前，如果非同源，共有三种行为受到限制：
 Cookie、LocalStorage 和 IndexDB 无法读取。 DOM 无法获得。 AJAX 请求不能发送。  JSONP JSONP 是服务器与客户端跨源通信的常用方法。最大特点就是简单适用，兼容性好（兼容低版本 IE），缺点是只支持 get 请求，不支持 post 请求。
核心思想：网页通过添加一个 script 元素，向服务器请求 JSON 数据，服务器收到请求后，将数据放在一个指定名字的回调函数的参数位置传回来。
首先，网页动态插入 script 元素，由它向跨源网址发出请求。
function addScriptTag(src) { var script = document.createElement(&amp;#39;script&amp;#39;); script.setAttribute(&amp;#34;type&amp;#34;,&amp;#34;text/javascript&amp;#34;); script.src = src; document.body.appendChild(script); } // 向服务器example.com发出请求，该请求的查询字符串有一个callback参数，用来指定回调函数的名字 window.onload = function () { addScriptTag(&amp;#39;http://example.com/ip?callback=foo&amp;#39;); } // 处理服务器返回回调函数的数据 function foo(data) { console.</description>
    </item>
    
    <item>
      <title>Promise相关</title>
      <link>https://qiujia236.github.io/posts/promise%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sun, 02 Feb 2020 15:15:12 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/promise%E7%9B%B8%E5%85%B3/</guid>
      <description>Promise 相关 概述 所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。
Promise 对象有以下两个特点。
 对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。 一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled 和从 pending 变为 rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。  有了 Promise 对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，Promise 对象提供统一的接口，使得控制异步操作更加容易。
// 传统写法 step1(function (value1) { step2(value1, function(value2) { step3(value2, function(value3) { step4(value3, function(value4) { // ...  }); }); }); }); // Promise 的写法 (new Promise(step1)) .then(step2) .then(step3) .then(step4); 从上面代码可以看到，采用 Promises 以后，程序流程变得非常清楚，十分易读。注意，为了便于理解，上面代码的 Promise 实例的生成格式，做了简化，真正的语法请参照下文。
基本用法 ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。
new Promise(function(resolve, reject) =&amp;gt; {}); Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。它们是两个函数，由 JavaScript 引擎提供，不用自己部署。</description>
    </item>
    
    <item>
      <title>数组排序</title>
      <link>https://qiujia236.github.io/posts/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Sun, 02 Feb 2020 14:02:54 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/</guid>
      <description>数组排序  选择排序  let sort = (numbers) =&amp;gt; { for(let i=0; i&amp;lt; numbers.length -1; i++){ let index = minIndex(numbers.slice(i))+ i if(index!==i){ swap(numbers, index, i) } } return numbers } let swap = (array, i, j) =&amp;gt; { let temp = array[i] array[i] = array[j] array[j] = temp } let minIndex = (numbers) =&amp;gt; { let index = 0 for(let i=1; i&amp;lt;numbers.length; i++){ if(numbers[i] &amp;lt; numbers[index]){ index = i } } return index } 快速排序  let quickSort = arr =&amp;gt; { if (arr.</description>
    </item>
    
    <item>
      <title>JS的继承</title>
      <link>https://qiujia236.github.io/posts/js%E7%9A%84%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Sun, 02 Feb 2020 13:20:37 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/js%E7%9A%84%E7%BB%A7%E6%89%BF/</guid>
      <description>JS 的继承 概述 如果真的是一种简易的脚本语言，其实不需要有&amp;quot;继承&amp;quot;机制。但是，Javascript 里面都是对象，必须有一种机制，将所有对象联系起来。所以，Brendan Eich 最后还是设计了&amp;quot;继承&amp;rdquo;。
他想到 C++和 Java 使用 new 命令时，都会调用&amp;quot;类&amp;quot;的构造函数（constructor）。他就做了一个简化的设计，在 Javascript 语言中，new 命令后面跟的不是类，而是构造函数。
举例来说，现在有一个叫做 DOG 的构造函数，表示狗对象的原型。
function DOG(name){ this.name = name; } 对这个构造函数使用 new，就会生成一个狗对象的实例。
var dogA = new DOG(&amp;#39;大毛&amp;#39;); alert(dogA.name); // 大毛 注意构造函数中的 this 关键字，它就代表了新创建的实例对象。
用构造函数生成实例对象，有一个缺点，那就是无法共享属性和方法。 比如，在 DOG 对象的构造函数中，设置一个实例对象的共有属性 species。
function DOG(name){ this.name = name; this.species = &amp;#39;犬科&amp;#39;; } 然后，生成两个实例对象：
var dogA = new DOG(&amp;#39;大毛&amp;#39;); var dogB = new DOG(&amp;#39;二毛&amp;#39;); dogA.species = &amp;#39;猫科&amp;#39;; alert(dogB.species); // 显示&amp;#34;犬科&amp;#34;，不受dogA的影响 这两个对象的 species 属性是独立的，修改其中一个，不会影响到另一个。每一个实例对象，都有自己的属性和方法的副本。这不仅无法做到数据共享，也是极大的资源浪费。</description>
    </item>
    
    <item>
      <title>DOM事件相关</title>
      <link>https://qiujia236.github.io/posts/dom%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Sat, 01 Feb 2020 23:15:50 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/dom%E4%BA%8B%E4%BB%B6%E7%9B%B8%E5%85%B3/</guid>
      <description>事件委托 事件委托是 JavaScript 中常用绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定在子元素的响应事件（click、keydown&amp;hellip;&amp;hellip;）委托给父元素，让父元素担当事件监听的职务。事件代理的原理是 DOM 元素的事件冒泡。
如下图所示，事件传播分成三个阶段：  当一个事件触发后,从 Window 对象触发,不断经过下级节点,直到目标节点。在事件到达目标节点之前的过程就是捕获阶段。所有经过的节点,都会触发对应的事件； 目标阶段：在目标节点上触发，称为“目标阶段” 冒泡阶段：从目标节点传导回 window 对象（从底层传回上层），称为“冒泡阶段”（bubbling phase）。事件代理即是利用事件冒泡的机制把里层所需要响应的事件绑定到外层；  假设有 body 和 body 节点下的 div1 均有绑定了一个注册事件：
 当为事件捕获(useCapture:true)时,先执行 body 的事件,再执行 div 的事件。 当为事件冒泡(useCapture:false)时,先执行 div 的事件,再执行 body 的事件。    当 useCapture 为默认 false 时,为事件冒泡
&amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;div1&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; window.onload = function(){ let body = document.querySelector(&amp;#39;body&amp;#39;); let div1 = document.getElementById(&amp;#39;div1&amp;#39;); body.addEventListener(&amp;#39;click&amp;#39;,function(){ console.log(&amp;#39;打印body&amp;#39;) }) div1.addEventListener(&amp;#39;click&amp;#39;,function(){ console.log(&amp;#39;打印div1&amp;#39;) }) } //结果:打印div1 打印body   当 useCapture 为 true 时,为事件捕获</description>
    </item>
    
    <item>
      <title>数组去重</title>
      <link>https://qiujia236.github.io/posts/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Sat, 01 Feb 2020 22:24:40 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</guid>
      <description>数组去重 不使用 Set 实现 利用 for 嵌套 for，然后 splice 去重。
function unique(arr){ for(var i=0; i&amp;lt;arr.length; i++){ for(var j=i+1; j&amp;lt;arr.length; j++){ if(arr[i]==arr[j]){ //第一个等同于第二个，splice方法删除第二个  arr.splice(j,1); j--; } } } return arr; } 双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。
利用 ES6 Set 去重 function unique (arr) { return Array.from(new Set(arr)) } 利用 Map 数据结构去重 function arrayNonRepeatfy(arr) { let map = new Map(); let array = new Array(); // 数组用于返回结果  for (let i = 0; i &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>常见的HTTP状态码</title>
      <link>https://qiujia236.github.io/posts/%E5%B8%B8%E8%A7%81%E7%9A%84http%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Sat, 01 Feb 2020 21:49:51 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E5%B8%B8%E8%A7%81%E7%9A%84http%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>常见的 HTTP 状态码 最基本的响应代码  200 - 请求成功 301 - 资源（网页等）被永久转移到其它 URL 404 - 请求的资源（网页等）不存在 500 - 内部服务器错误  HTTP 状态码分类 HTTP 状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP 状态码共分为 5 种类型：
  1** 系列响应代码仅在与 HTTP 服务器沟通时使用。
 100(&amp;ldquo;Continue&amp;rdquo;),该响应代码表明：客户端应重新发送初始请求，并在请求中附上第一次请求时未提供的（可能很大或者包含敏感信息的）表示。客户端这次发送的请求不会被拒绝。 101(&amp;ldquo;Switching Protocols&amp;rdquo;),当客户端通过在请求里使用 Upgrade 报头，以通知服务器它想改用除 HTTP 协议之外的其他协议时，客户端将获得此响应代码。101 响应代码表示“行，我现在改用另一个协议了”。通常 HTTP 客户端会在收到服务器发来的 101 响应后关闭与服务器的 TCP 连接。    2** 成功，操作被成功接收并处理。
 200(&amp;ldquo;OK&amp;rdquo;)，一般来说，这是客户端希望看到的响应代码。它表示服务器成功执行了客户端所请求的动作，对于 GET 请求，服务器应返回客户端所请求资源的一个表示。对于其他请求，服务器应返回当前所选资源的一个表示，或者刚刚执行的动作的一个描述。 201(&amp;ldquo;Created&amp;rdquo;)，当服务器依照客户端的请求创建了一个新资源时，发送此响应代码。Location 报头应包含指向新创建资源的规范 URI。 202(&amp;ldquo;Accepted&amp;rdquo;)，已接受。已经接受请求，但未处理完成。 204(&amp;ldquo;No Content&amp;rdquo;)，无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档。    3** 重定向，需要进一步的操作以完成请求
 300(&amp;ldquo;Multiple Choices&amp;rdquo;),多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择。 301(&amp;ldquo;Moved Permanently&amp;rdquo;)，永久移动。请求的资源已被永久的移动到新 URI，返回信息会包括新的 URI，浏览器会自动定向到新 URI。今后任何新的请求都应使用新的 URI 代替。 303(&amp;ldquo;See Other&amp;rdquo;)，请求已经被处理，但服务器不是直接返回一个响应文档，而是返回一个响应文档的 URI。该响应文档可能是一个静态的状态信息，也可能是一个更有趣的资源。 304(&amp;ldquo;Not Modified&amp;rdquo;)，未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源。 307(&amp;ldquo;Temporary Redirect&amp;rdquo;)，临时重定向。当服务器希望把客户端重新定向到一个镜像站点时，可以用 307 来响应 GET 请求。对 POST，PUT 或者 DELETE 请求响应 303 表明：操作已经成功执行，但响应实体将不随本响应一起返回，若客户端想要获取响应实体主体，它需要向另一个 URI 发送 GET 请求。    ** 客户端错误，请求包含语法错误或无法完成请求。</description>
    </item>
    
    <item>
      <title>Call、apply、bind的用法</title>
      <link>https://qiujia236.github.io/posts/callapplybind%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 01 Feb 2020 20:46:21 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/callapplybind%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>Call、apply、bind 的用法 this 的动态切换，固然为 JavaScript 创造了巨大的灵活性，但也使得编程变得困难和模糊。有时，需要把 this 固定下来，避免出现意想不到的情况。JavaScript 提供了 call、apply、bind 这三个方法，来切换/固定 this 的指向。
call 函数实例的 call 方法，可以指定函数内部 this 的指向（即函数执行时所在的作用域），然后在所指定的作用域中，调用该函数。
var obj = {}; var f = function () { return this; }; f() === window // true f.call(obj) === obj // true 上面代码中，全局环境运行函数 f 时，this 指向全局环境（浏览器为 window 对象）；call 方法可以改变 this 的指向，指定 this 指向对象 obj，然后在对象 obj 的作用域中运行函数 f。
call 方法的参数，应该是一个对象。如果参数为空、null 和 undefined，则默认传入全局对象。
var n = 123; var obj = { n: 456 }; function a() { console.</description>
    </item>
    
    <item>
      <title>闭包</title>
      <link>https://qiujia236.github.io/posts/%E9%97%AD%E5%8C%85/</link>
      <pubDate>Sat, 01 Feb 2020 20:08:42 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E9%97%AD%E5%8C%85/</guid>
      <description>闭包 闭包的概念 各种专业文献上的&amp;quot;闭包&amp;rdquo;（closure）定义非常抽象，很难看懂。我的理解是，闭包就是能够读取其他函数内部变量的函数。函数和函数内部能访问到的变量也叫环境的总和，组成一个闭包。
闭包的作用   可以读取函数内部的变量。
  一个就是让这些变量的值始终保持在内存中。
function foo() { var a = 2; return function fun1() { console.log(a) } } var fun2 = foo() fun2() //2 在上面的例子中，fun1 能够访问 foo 的内部作用域。在 foo()执行后，把 foo()的返回值 fun1 赋值给 fun2 并调用 fun2。打印出了结果 2 。
此时，我们可以说 fun1 记住并访问了所在的词法作用域 或者说 fun2 访问了另一个函数作用域中的变量。
由于引擎有自动的垃圾回收机制，在 foo()执行后（不再使用），通常 foo 的整个内部作用域会被销毁，对内存进行回收。闭包的神奇之处正是可以阻止这件事情的发生，因为 fun1 依然持有对该作用域的引用，这个引用就叫做闭包。
  闭包可以用来隐藏一个变量，比如有一个变量，我们不想别人直接访问它，而是间接使用你提供的方法来操作它，就可以使用闭包。
function outerFn(){ var i = 10; window.add = function(){ i+=1; } return i } var inner = outerFn(); inner(); //10 add(); inner(); //11   使用闭包的注意点   由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</description>
    </item>
    
    <item>
      <title>JQuery的常用功能</title>
      <link>https://qiujia236.github.io/posts/jquery%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Sun, 26 Jan 2020 14:13:52 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/jquery%E7%9A%84%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</guid>
      <description>JQuery 的常用功能 概述 jQuery 是目前使用最广泛的 javascript 函数库。全世界排名前 100 万的网站，有 46%使用 jQuery，远远超过其他库。微软公司甚至把 jQuery 作为他们的官方库。 对于网页开发者来说，学会 jQuery 是必要的。因为它让你了解业界最通用的技术，为将来学习更高级的库打下基础，并且确实可以很轻松地做出许多复杂的效果。虽然 jQuery 上手简单，比其他库容易学会，但是要全面掌握，却不轻松。因为它涉及到网页开发的方方面面，提供的各种方法和内部变化有上千种之多。初学者常常感到，入门很方便，提高很困难。
jQuery 如何获取元素 jQuery 的基本设计思想和主要用法，就是&amp;quot;选择某个网页元素，然后对其进行某种操作&amp;rdquo;。这是它区别于其他 Javascript 库的根本特点。
使用 jQuery 的第一步，往往就是将一个选择表达式，放进构造函数 jQuery()（简写为$），然后得到被选中的元素。
选择表达式可以是 CSS 选择器：
$(document) //选择整个文档对象  $(&amp;#39;#myId&amp;#39;) //选择ID为myId的网页元素  $(&amp;#39;div.myClass&amp;#39;) // 选择class为myClass的div元素  $(&amp;#39;input[name=first]&amp;#39;) // 选择name属性等于first的input元素 也可以是 jQuery 特有的表达式：
$(&amp;#39;a:first&amp;#39;) //选择网页中第一个a元素  $(&amp;#39;tr:odd&amp;#39;) //选择表格的奇数行  $(&amp;#39;#myForm :input&amp;#39;) // 选择表单中的input元素  $(&amp;#39;div:visible&amp;#39;) //选择可见的div元素 jQuery 设计思想之二，就是提供各种强大的过滤器，对结果集进行筛选，缩小选择结果。
$(&amp;#39;div&amp;#39;).has(&amp;#39;p&amp;#39;); // 选择包含p元素的div元素  $(&amp;#39;div&amp;#39;).not(&amp;#39;.myClass&amp;#39;); //选择class不等于myClass的div元素  $(&amp;#39;div&amp;#39;).filter(&amp;#39;.myClass&amp;#39;); //选择class等于myClass的div元素  $(&amp;#39;div&amp;#39;).</description>
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>https://qiujia236.github.io/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Fri, 17 Jan 2020 22:18:14 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>JS 函数的执行时机 setTimeout()基础 setTimeout 函数用来指定某个函数或某段代码，在多少毫秒之后执行。它返回一个整数，表示定时器的编号，以后可以用来取消这个定时器。
var timerId = setTimeout(func|code, delay) 上面代码中，setTimeout 函数接受两个参数，第一个参数 func|code 是将要推迟执行的函数名或者一段代码，第二个参数 delay 是推迟执行的毫秒数。
需要注意的是，推迟执行的代码必须以字符串的形式，放入 setTimeout，因为引擎内部使用 eval 函数，将字符串转为代码。如果推迟执行的是函数，则可以直接将函数名，放入 setTimeout。一方面 eval 函数有安全顾虑，另一方面为了便于 JavaScript 引擎优化代码，setTimeout 方法一般总是采用函数名的形式，就像下面这样。
function func(){ console.log(2); } setTimeout(func,1000); // 或者 setTimeout(function (){console.log(2)},1000); 分析 for 循环中的 setTimeout 函数 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },3000) } 说起事件循环，不得不提起任务队列。事件循环只有一个，但任务队列可能有多个，任务队列可分为宏任务（macro-task）和微任务（micro-task）。注意进入到任务队列的是具体的执行任务的函数。比如上述例子 setTimeout()中的 console.log 函数。
XHR 回调、事件回调（鼠标键盘事件）、setImmediate、setTimeout、setInterval、indexedDB 数据库操作等 I/O 以及 UI rendering 都属于宏任务（也有文章说 UI render 不属于宏任务，目前还没有定论），process.nextTick、Promise.then、Object.observer(已经被废弃)、MutationObserver(html5 新特性)属于微任务。
另外不同类型的任务会分别进入到他们所属类型的任务队列，比如所有 setTimeout()的回调都会进入到 setTimeout 任务队列，所有 then()回调都会进入到 then 队列。当前的整体代码我们可以认为是宏任务。事件循环从当前整体代码开始第一次事件循环，然后再执行队列中所有的微任务，当微任务执行完毕之后，事件循环再找到其中一个宏任务队列并执行其中的所有任务，然后再找到一个微任务队列并执行里面的所有任务，就这样一直循环下去。</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>https://qiujia236.github.io/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 16 Jan 2020 14:32:31 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>JS 对象基本用法 概述 对象（object）是 JavaScript 语言的核心概念，也是最重要的数据类型。什么是对象？简单说，对象就是一组“键值对”（key-value）的集合，是一种无序的复合数据集合。
var obj = { foo: &amp;#39;Hello&amp;#39;, bar: &amp;#39;World&amp;#39; }; 上面代码中，大括号就定义了一个对象，它被赋值给变量 obj，所以变量 obj 就指向一个对象。该对象内部包含两个键值对（又称为两个“成员”），第一个键值对是 foo: &amp;lsquo;Hello&amp;rsquo;，其中 foo 是“键名”（成员的名称），字符串 Hello 是“键值”（成员的值）。键名与键值之间用冒号分隔。第二个键值对是 bar: &amp;lsquo;World&amp;rsquo;，bar 是键名，World 是键值。两个键值对之间用逗号分隔。
对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以。上面的代码也可以写成下面这样。
var obj = { &amp;#39;foo&amp;#39;: &amp;#39;Hello&amp;#39;, &amp;#39;bar&amp;#39;: &amp;#39;World&amp;#39; }; 如果键名是数值，会被自动转为字符串。如果键名不符合标识名的条件（比如第一个字符为数字，或者含有空格或运算符），且也不是数字，则必须加上引号，否则会报错。
// 报错 var obj = { 1p: &amp;#39;Hello World&amp;#39; }; // 不报错 var obj = { &amp;#39;1p&amp;#39;: &amp;#39;Hello World&amp;#39;, &amp;#39;h w&amp;#39;: &amp;#39;Hello World&amp;#39;, &amp;#39;p+q&amp;#39;: &amp;#39;Hello World&amp;#39; }; 上面对象的三个键名，都不符合标识名的条件，所以必须加上引号。</description>
    </item>
    
    <item>
      <title>JavaScript语法</title>
      <link>https://qiujia236.github.io/posts/javascript%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 14 Jan 2020 23:21:43 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/javascript%E8%AF%AD%E6%B3%95/</guid>
      <description>JavaScript 语法 语句 JavaScript 程序的执行单位为行（line），也就是一行一行地执行。语句（statement）是为了完成某种任务而进行的操作。
var a = 1 + 2; 这条语句先用 var 命令，声明了变量 a，然后将 1 + 3 的运算结果赋值给变量 a。1 + 3 叫做表达式（expression），指一个为了得到返回值的计算式。语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。
语句以分号结尾，一个分号就表示一个语句结束。多个语句可以写在一行内。
var a = 1 + 2 ; var b = &amp;#34;a&amp;#34;; 表达式不需要分号结尾。一旦在表达式后面添加分号，则 JavaScript 引擎就将表达式视为语句，这样会产生一些没有任何意义的语句。
1 + 3; &amp;#39;abc&amp;#39;; 变量   变量是对“值”的具名引用。变量就是为“值”起名，然后引用这个名字，就等同于引用这个值。变量的名字就是变量名。
var a = 1; 上面的代码先声明变量 a，然后在变量 a 与数值 1 之间建立引用关系，称为将数值 1“赋值”给变量 a。以后，引用变量名 a 就会得到数值 1。 变量的声明和赋值，是分开的两个步骤，上面的代码将它们合在了一起，实际的步骤是下面这样。
var a; a = 1; 如果只是声明变量而没有赋值，则该变量的值是 undefined。undefined 是一个特殊的值，表示“无定义”。</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://qiujia236.github.io/posts/javascript/</link>
      <pubDate>Sun, 12 Jan 2020 15:19:41 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/javascript/</guid>
      <description>JavaScript 的诞生 诞生背景 &amp;ldquo;1994 年，网景公司（Netscape）发布了 Navigator 浏览器 0.9 版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。&amp;hellip;&amp;hellip;网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。&amp;rdquo; 网页脚本语言到底是什么语言？网景公司当时有两个选择：一个是采用现有的语言，比如 Perl、Python、Tcl、Scheme 等等，允许它们直接嵌入网页；另一个是发明一种全新的语言。
这两个选择各有利弊。第一个选择，有利于充分利用现有代码和程序员资源，推广起来比较容易；第二个选择，有利于开发出完全适用的语言，实现起来比较容易。
就在这时，发生了另外一件大事：1995 年 Sun 公司将 Oak 语言改名为 Java，正式向市场推出。
Sun 公司大肆宣传，许诺这种语言可以&amp;quot;一次编写，到处运行&amp;rdquo;（Write Once, Run Anywhere），它看上去很可能成为未来的主宰。
网景公司动了心，决定与 Sun 公司结成联盟。它不仅允许 Java 程序以 applet（小程序）的形式，直接在浏览器中运行；甚至还考虑直接将 Java 作为脚本语言嵌入网页，只是因为这样会使 HTML 网页过于复杂，后来才不得不放弃。
Brendan Eich 此时，34 岁的系统程序员 Brendan Eich 登场了。1995 年 4 月，网景公司录用了他。Brendan Eich 的主要方向和兴趣是函数式编程，网景公司招聘他的目的，是研究将 Scheme 语言作为网页脚本语言的可能性。
仅仅一个月之后，1995 年 5 月，网景公司做出决策，未来的网页脚本语言必须&amp;quot;看上去与 Java 足够相似&amp;rdquo;，但是比 Java 简单，使得非专业的网页作者也能很快上手。这个决策实际上将 Perl、Python、Tcl、Scheme 等非面向对象编程的语言都排除在外了。Brendan Eich 被指定为这种&amp;quot;简化版 Java 语言&amp;quot;的设计师。
但是，他对 Java 一点兴趣也没有。为了应付公司安排的任务，他只用 10 天时间就把 Javascript 设计出来了。</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://qiujia236.github.io/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sat, 11 Jan 2020 10:16:36 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>浅析 URL URL 概述 URL 是 Web 中的一个核心概念。它是浏览器用来检索 web 上公布的任何资源的机制。
URL 指的是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个独特的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。
一个 URL 由不同的部分组成，其中一些是必须的，而另一些是可选的。让我们以下面这个 URL 为例看看其中最重要的部分：
http://www.example.com:80/path/to/myfile.html?key1=value1&amp;amp;key2=value2#SomewhereInTheDocumenthttp:// 是协议。它表明了浏览器必须使用何种协议。它通常都是 HTTP 协议或是 HTTP 协议的安全版，即 HTTPS。Web 需要它们二者之一，但浏览器也知道如何处理其他协议，比如 mailto:（打开邮件客户端）或者 ftp:（处理文件传输），所以当你看到这些协议时，不必惊讶。
www.example.com 是域名。 它表明正在请求哪个 Web 服务器。或者，可以直接使用 IP address, 但是因为它不太方便，所以它不经常在网络上使用。
:80 是端口。 它表示用于访问 Web 服务器上的资源的技术“门”。如果 Web 服务器使用 HTTP 协议的标准端口（HTTP 为 80，HTTPS 为 443）来授予其资源的访问权限，则通常会被忽略。否则是强制性的。
/path/to/myfile.html 是网络服务器上资源的路径。在 Web 的早期阶段，像这样的路径表示 Web 服务器上的物理文件位置。
?key1=value1&amp;amp;key2=value2 是提供给网络服务器的额外参数。 这些参数是用 &amp;amp; 符号分隔的键/值对列表。在返回资源之前，Web 服务器可以使用这些参数来执行额外的操作。</description>
    </item>
    
    <item>
      <title>css知识总结</title>
      <link>https://qiujia236.github.io/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 10 Jan 2020 11:45:42 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>浏览器渲染与动画 浏览器的渲染原理   浏览器工作大流程  根据 HTML 构建 HTL 树(DOM)； 根据 CSS 构建 CSS(CSSOM)； 将两棵树合并成一颗渲染树(rendertree)； Layout 布局（文档流、盒模型、计算大小和位置）； Paint 绘制（把边框颜色、文字颜色、阴影等画出来）； Compose 合成（根据层叠关系展示画面）。  浏览器会解析三个东西：
 HTML/SVG/XHTML，解析这三种文件会产生一个 DOM Tree。 CSS，解析 CSS 会产生 CSS 规则树。 Javascript，脚本，主要是通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree。  解析完成后，浏览器引擎会通过 DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：
 Rendering Tree 渲染树并不等同于 DOM 树，因为一些像 Header 或 display:none 的东西就没必要放在渲染树中了。 CSS 的 Rule Tree 主要是为了完成匹配并把 CSS Rule 附加上 Rendering Tree 上的每个 Element。也就是 DOM 结点。也就是所谓的 Frame。 计算每个 Frame（也就是每个 Element）的位置，这又叫 layout 和 reflow 过程。  最后通过调用操作系统 Native GUI 的 API 绘制。</description>
    </item>
    
    <item>
      <title>CSS盒模型</title>
      <link>https://qiujia236.github.io/posts/css%E7%9B%92%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 04 Jan 2020 14:54:21 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/css%E7%9B%92%E6%A8%A1%E5%9E%8B/</guid>
      <description>CSS 盒模型 简述 CSS 盒模型就是布局网页的一种手段包括边框（border）、外边距（margin）、内边距（padding）、网页元素（content）、宽（width）、高（height）等元素。 !(/CSS盒模型/CSS盒模型2.png)
盒模型分为 W3C 标准盒模型和 IE 盒模型：
  W3C 标准盒模型，又称为 content-box，属性 width,height 只包含内容 content，不包含 border 和 padding。
width = 内容的宽度
height = 内容的高度
  IE 盒模型，又称为 border-box，属性 width,height 包含 border 和 padding，指的是 content+padding+border。
width = border + padding + 内容的宽度
height = border + padding + 内容的高度
  盒模型的相关边框：
 width 和 height 设置了内容框的宽/高; padding 家族属性设置内边距的宽度; border 家族属性设置边界的宽度、样式和颜色; margin 家族属性设置包围 CSS 盒子外部区域的宽度，这个属性推开布局中其他的 CSS 盒子;  边框 border   边框颜色：border-color： !</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://qiujia236.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 01 Jan 2020 22:34:29 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML 常用标签 链接标签 链接（hyperlink）是互联网的核心。它允许用户在页面上，从一个网址跳转到另一个网址，从而把所有资源联系在一起。
URL 是链接指向的地址。链接不仅可以指向另一个网页，也可以指向文本、图像、文件等资源。可以这样说，所有互联网上的资源，都可以通过链接访问。 链接通过&amp;lt;a&amp;gt;标签表示，用户点击后，浏览器会跳转到指定的网址。下面就是一个典型的链接。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34;&amp;gt;谷歌&amp;lt;/a&amp;gt; 上面代码就定义了一个超级链接。浏览器显示“谷歌”，文字下面默认会有下划线，表示这是一个链接。用户点击后，浏览器跳转到 href 属性指定的网址。
&amp;lt;a&amp;gt;标签内部不仅可以放置文字，也可以放置其他元素，比如段落、图像、多媒体等等。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://www.example.com/foo.jpg&amp;#34; /&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;a&amp;gt;标签有如下属性：
  href 属性给出链接指向的网址。它的值应该是一个 URL 或者锚点。
&amp;lt;a href=&amp;#34;#demo&amp;#34;&amp;gt;示例&amp;lt;/a&amp;gt; 上面代码中，href 属性的值是#加上锚点名称。点击后，浏览器会自动滚动，停在当前页面里面 demo 锚点所在的位置。
  hreflang 属性给出链接指向的网址所使用的语言，纯粹是提示性的，没有实际功能。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34; hreflang=&amp;#34;en&amp;#34;&amp;gt;示例网址&amp;lt;/a&amp;gt; 上面代码表明，href 属性指向的网址的语言是英语。
  title 属性给出链接的说明信息。鼠标悬停在链接上方时，浏览器会将这个属性的值，以提示块的形式显示出来。
下面代码中，用户鼠标停留在链接上面，会出现文字提示 hello。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34; title=&amp;#34;hello&amp;#34;&amp;gt;示例&amp;lt;/a&amp;gt;。   target 属性指定如何展示打开的链接。它可以是在指定的窗口打开，也可以在&amp;lt;iframe&amp;gt;里面打开。
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34; target=&amp;#34;test&amp;#34;&amp;gt;google&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.baidu.com&amp;#34; target=&amp;#34;test&amp;#34;&amp;gt;baidu&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 上面代码中，两个链接都在名叫 test 的窗口打开。首先点击链接 google，浏览器发现没有叫做 test 的窗口，就新建一个窗口，起名为 test，在该窗口打开 google.com。然后，用户又点击链接 baidu，由于已经存在 test 窗口，浏览器就在该窗口打开 baidu.</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://qiujia236.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 31 Dec 2019 19:45:18 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>HTML 入门笔记 1 概述 HTML 是网页使用的语言，定义了网页的结构和内容。浏览器访问网站，其实就是从服务器下载 HTML 代码，然后渲染出网页。
HTML 的全名是“超文本标记语言”（HyperText Markup Language），上个世纪 90 年代由欧洲核子研究中心的物理学家蒂姆·伯纳斯-李（Tim Berners-Lee）发明。它的最大特点就是支持超链接，可以跳转到其他网页，从而构成了整个互联网。1999 年，HTML 4.01 版发布，成为广泛接受的 HTML 标准。2014 年，HTML 5 发布，这是目前正在使用的版本。
HTML 起手式&amp;ndash;头部介绍 !(/static/HTML/HTML头部.png)
  网页的第一个标签通常是 &amp;lt;!doctype&amp;gt;，表示文档类型，告诉浏览器如何解析网页。一般来说，只要简单声明 doctype 为 html 即可。
&amp;lt;!DOCTYPE html&amp;gt; 浏览器就会按照 HTML5 的规则处理网页。有时，该标签采用完全大写的形式 &amp;lt;!DOCTYPE html&amp;gt;，以便区别于正常的 HTML 标签。因为&amp;lt;!doctype&amp;gt;本质上不是标签，更像一个处理指令。
&amp;lt;!DOCTYPE html&amp;gt;   &amp;lt;html&amp;gt;标签是网页的顶层容器，也称为根元素（root element），其他元素都是它的子元素。一个网页只能有一个&amp;lt;html&amp;gt;标签。该标签的 lang 属性，表示网页内容默认的语言,可以把 en 改成 zh-CN。
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;lt;/html&amp;gt;   &amp;lt;head&amp;gt;标签是一个容器标签，用于放置网页的元信息。它的内容不会出现在网页上，而是为网页渲染做准备。&amp;lt;head&amp;gt;是&amp;lt;html&amp;gt;的第一个子元素。如果网页不包含&amp;lt;head&amp;gt;，浏览器会自动创建一个。&amp;lt;meta&amp;gt; 标签用于设置或说明网页的元数据，必须放在&amp;lt;head&amp;gt;里面。一个&amp;lt;meta&amp;gt;标签就是一项元数据，网页可以有多个&amp;lt;meta&amp;gt;。
下面代码声明，网页为 UTF-8 编码。虽然可以使用其他的编码方式，但基本上都采用 UTF-8。注意，声明的编码方式，应该与网页实际的编码方式一致，即声明了 UTF-8，网页就应该使用 UTF-8 编码保存。
&amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; 下面代码声明禁用缩放，用于兼容手机。</description>
    </item>
    
    <item>
      <title>用 hugo 搭建个人博客</title>
      <link>https://qiujia236.github.io/posts/%E6%B7%BB%E5%8A%A0hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 30 Dec 2019 13:39:13 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E6%B7%BB%E5%8A%A0hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>如何使用 hugo 搭建个人博客   下载 hugo，到https://github.com/gohugoio/hugo/releases 下载 hugo_0.62.0_Windows-64bit.zip，解压，将 hugo.exe 放到个人目录里面，并且设置环境变量，path 为你的个人目录路径,安装完成后使用 hugo version 检测 hugo 是否安装成功，如果出现 Hugo Static Site Generator v0.62.0-6608F155 windows/amd64 BuildDate: 2019-12-23T10:26:18Z 的字样，则表明安装成功；
  使用 hugo new site xxx 创建一个 hugo 站点，其中 xxx 为站点的名字；
  添加主题，使用 cmder 软件输入 cd xxx 命令进入站点，在站点里面输入 git init 和 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 两条命令获取主题，最后输入 echo &amp;lsquo;theme = &amp;ldquo;ananke&amp;rdquo;&amp;rsquo; &amp;raquo; config.toml 添加主题，在 config.toml 中可以修改相关配置，例如你的标题，你的语言编码，还有 URL，其中 URL 必须为你的域名，比如 xxx.github.io 域名； !(/images/toml.png)</description>
    </item>
    
  </channel>
</rss>