<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wb的博客</title>
    <link>https://qiujia236.github.io/posts/</link>
    <description>Recent content in Posts on wb的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sun, 12 Jan 2020 15:19:41 +0800</lastBuildDate>
    
	<atom:link href="https://qiujia236.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript</title>
      <link>https://qiujia236.github.io/posts/javascript/</link>
      <pubDate>Sun, 12 Jan 2020 15:19:41 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/javascript/</guid>
      <description>JavaScript 的诞生 诞生背景 &amp;ldquo;1994 年，网景公司（Netscape）发布了 Navigator 浏览器 0.9 版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。&amp;hellip;&amp;hellip;网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。&amp;rdquo; 网页脚本语言到底是什么语言？网景公司当时有两个选择：一个是采用现有的语言，比如 Perl、Python、Tcl、Scheme 等等，允许它们直接嵌入网页；另一个是发明一种全新的语言。
这两个选择各有利弊。第一个选择，有利于充分利用现有代码和程序员资源，推广起来比较容易；第二个选择，有利于开发出完全适用的语言，实现起来比较容易。
就在这时，发生了另外一件大事：1995 年 Sun 公司将 Oak 语言改名为 Java，正式向市场推出。
Sun 公司大肆宣传，许诺这种语言可以&amp;quot;一次编写，到处运行&amp;rdquo;（Write Once, Run Anywhere），它看上去很可能成为未来的主宰。
网景公司动了心，决定与 Sun 公司结成联盟。它不仅允许 Java 程序以 applet（小程序）的形式，直接在浏览器中运行；甚至还考虑直接将 Java 作为脚本语言嵌入网页，只是因为这样会使 HTML 网页过于复杂，后来才不得不放弃。
Brendan Eich 此时，34 岁的系统程序员 Brendan Eich 登场了。1995 年 4 月，网景公司录用了他。Brendan Eich 的主要方向和兴趣是函数式编程，网景公司招聘他的目的，是研究将 Scheme 语言作为网页脚本语言的可能性。
仅仅一个月之后，1995 年 5 月，网景公司做出决策，未来的网页脚本语言必须&amp;quot;看上去与 Java 足够相似&amp;rdquo;，但是比 Java 简单，使得非专业的网页作者也能很快上手。这个决策实际上将 Perl、Python、Tcl、Scheme 等非面向对象编程的语言都排除在外了。Brendan Eich 被指定为这种&amp;quot;简化版 Java 语言&amp;quot;的设计师。
但是，他对 Java 一点兴趣也没有。为了应付公司安排的任务，他只用 10 天时间就把 Javascript 设计出来了。</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://qiujia236.github.io/posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Sat, 11 Jan 2020 10:16:36 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>浅析 URL URL 概述 URL 是 Web 中的一个核心概念。它是浏览器用来检索 web 上公布的任何资源的机制。
URL 指的是统一资源定位符（Uniform Resource Locator）。URL 无非就是一个给定的独特资源在 Web 上的地址。理论上说，每个有效的 URL 都指向一个独特的资源。这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等。
一个 URL 由不同的部分组成，其中一些是必须的，而另一些是可选的。让我们以下面这个 URL 为例看看其中最重要的部分：
http://www.example.com:80/path/to/myfile.html?key1=value1&amp;amp;key2=value2#SomewhereInTheDocumenthttp:// 是协议。它表明了浏览器必须使用何种协议。它通常都是 HTTP 协议或是 HTTP 协议的安全版，即 HTTPS。Web 需要它们二者之一，但浏览器也知道如何处理其他协议，比如 mailto:（打开邮件客户端）或者 ftp:（处理文件传输），所以当你看到这些协议时，不必惊讶。
www.example.com 是域名。 它表明正在请求哪个 Web 服务器。或者，可以直接使用 IP address, 但是因为它不太方便，所以它不经常在网络上使用。
:80 是端口。 它表示用于访问 Web 服务器上的资源的技术“门”。如果 Web 服务器使用 HTTP 协议的标准端口（HTTP 为 80，HTTPS 为 443）来授予其资源的访问权限，则通常会被忽略。否则是强制性的。
/path/to/myfile.html 是网络服务器上资源的路径。在 Web 的早期阶段，像这样的路径表示 Web 服务器上的物理文件位置。
?key1=value1&amp;amp;key2=value2 是提供给网络服务器的额外参数。 这些参数是用 &amp;amp; 符号分隔的键/值对列表。在返回资源之前，Web 服务器可以使用这些参数来执行额外的操作。</description>
    </item>
    
    <item>
      <title>css知识总结</title>
      <link>https://qiujia236.github.io/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 10 Jan 2020 11:45:42 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>浏览器渲染与动画 浏览器的渲染原理   浏览器工作大流程  根据 HTML 构建 HTL 树(DOM)； 根据 CSS 构建 CSS(CSSOM)； 将两棵树合并成一颗渲染树(rendertree)； Layout 布局（文档流、盒模型、计算大小和位置）； Paint 绘制（把边框颜色、文字颜色、阴影等画出来）； Compose 合成（根据层叠关系展示画面）。  浏览器会解析三个东西：
 HTML/SVG/XHTML，解析这三种文件会产生一个 DOM Tree。 CSS，解析 CSS 会产生 CSS 规则树。 Javascript，脚本，主要是通过 DOM API 和 CSSOM API 来操作 DOM Tree 和 CSS Rule Tree。  解析完成后，浏览器引擎会通过 DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：
 Rendering Tree 渲染树并不等同于 DOM 树，因为一些像 Header 或 display:none 的东西就没必要放在渲染树中了。 CSS 的 Rule Tree 主要是为了完成匹配并把 CSS Rule 附加上 Rendering Tree 上的每个 Element。也就是 DOM 结点。也就是所谓的 Frame。 计算每个 Frame（也就是每个 Element）的位置，这又叫 layout 和 reflow 过程。  最后通过调用操作系统 Native GUI 的 API 绘制。</description>
    </item>
    
    <item>
      <title>CSS盒模型</title>
      <link>https://qiujia236.github.io/posts/css%E7%9B%92%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sat, 04 Jan 2020 14:54:21 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/css%E7%9B%92%E6%A8%A1%E5%9E%8B/</guid>
      <description>CSS 盒模型 简述 CSS 盒模型就是布局网页的一种手段包括边框（border）、外边距（margin）、内边距（padding）、网页元素（content）、宽（width）、高（height）等元素。 !(/CSS盒模型/CSS盒模型2.png)
盒模型分为 W3C 标准盒模型和 IE 盒模型：
  W3C 标准盒模型，又称为 content-box，属性 width,height 只包含内容 content，不包含 border 和 padding。
width = 内容的宽度
height = 内容的高度
  IE 盒模型，又称为 border-box，属性 width,height 包含 border 和 padding，指的是 content+padding+border。
width = border + padding + 内容的宽度
height = border + padding + 内容的高度
  盒模型的相关边框：
 width 和 height 设置了内容框的宽/高; padding 家族属性设置内边距的宽度; border 家族属性设置边界的宽度、样式和颜色; margin 家族属性设置包围 CSS 盒子外部区域的宽度，这个属性推开布局中其他的 CSS 盒子;  边框 border   边框颜色：border-color： !</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://qiujia236.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Wed, 01 Jan 2020 22:34:29 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>HTML 常用标签 链接标签 链接（hyperlink）是互联网的核心。它允许用户在页面上，从一个网址跳转到另一个网址，从而把所有资源联系在一起。
URL 是链接指向的地址。链接不仅可以指向另一个网页，也可以指向文本、图像、文件等资源。可以这样说，所有互联网上的资源，都可以通过链接访问。 链接通过&amp;lt;a&amp;gt;标签表示，用户点击后，浏览器会跳转到指定的网址。下面就是一个典型的链接。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34;&amp;gt;谷歌&amp;lt;/a&amp;gt; 上面代码就定义了一个超级链接。浏览器显示“谷歌”，文字下面默认会有下划线，表示这是一个链接。用户点击后，浏览器跳转到 href 属性指定的网址。
&amp;lt;a&amp;gt;标签内部不仅可以放置文字，也可以放置其他元素，比如段落、图像、多媒体等等。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34;&amp;gt; &amp;lt;img src=&amp;#34;https://www.example.com/foo.jpg&amp;#34; /&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;a&amp;gt;标签有如下属性：
  href 属性给出链接指向的网址。它的值应该是一个 URL 或者锚点。
&amp;lt;a href=&amp;#34;#demo&amp;#34;&amp;gt;示例&amp;lt;/a&amp;gt; 上面代码中，href 属性的值是#加上锚点名称。点击后，浏览器会自动滚动，停在当前页面里面 demo 锚点所在的位置。
  hreflang 属性给出链接指向的网址所使用的语言，纯粹是提示性的，没有实际功能。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34; hreflang=&amp;#34;en&amp;#34;&amp;gt;示例网址&amp;lt;/a&amp;gt; 上面代码表明，href 属性指向的网址的语言是英语。
  title 属性给出链接的说明信息。鼠标悬停在链接上方时，浏览器会将这个属性的值，以提示块的形式显示出来。
下面代码中，用户鼠标停留在链接上面，会出现文字提示 hello。
&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34; title=&amp;#34;hello&amp;#34;&amp;gt;示例&amp;lt;/a&amp;gt;。   target 属性指定如何展示打开的链接。它可以是在指定的窗口打开，也可以在&amp;lt;iframe&amp;gt;里面打开。
&amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.google.com&amp;#34; target=&amp;#34;test&amp;#34;&amp;gt;google&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;&amp;lt;a href=&amp;#34;https://www.baidu.com&amp;#34; target=&amp;#34;test&amp;#34;&amp;gt;baidu&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt; 上面代码中，两个链接都在名叫 test 的窗口打开。首先点击链接 google，浏览器发现没有叫做 test 的窗口，就新建一个窗口，起名为 test，在该窗口打开 google.com。然后，用户又点击链接 baidu，由于已经存在 test 窗口，浏览器就在该窗口打开 baidu.</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://qiujia236.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 31 Dec 2019 19:45:18 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>HTML 入门笔记 1 概述 HTML 是网页使用的语言，定义了网页的结构和内容。浏览器访问网站，其实就是从服务器下载 HTML 代码，然后渲染出网页。
HTML 的全名是“超文本标记语言”（HyperText Markup Language），上个世纪 90 年代由欧洲核子研究中心的物理学家蒂姆·伯纳斯-李（Tim Berners-Lee）发明。它的最大特点就是支持超链接，可以跳转到其他网页，从而构成了整个互联网。1999 年，HTML 4.01 版发布，成为广泛接受的 HTML 标准。2014 年，HTML 5 发布，这是目前正在使用的版本。
HTML 起手式&amp;ndash;头部介绍 !(/static/HTML/HTML头部.png)
  网页的第一个标签通常是 &amp;lt;!doctype&amp;gt;，表示文档类型，告诉浏览器如何解析网页。一般来说，只要简单声明 doctype 为 html 即可。
&amp;lt;!DOCTYPE html&amp;gt; 浏览器就会按照 HTML5 的规则处理网页。有时，该标签采用完全大写的形式 &amp;lt;!DOCTYPE html&amp;gt;，以便区别于正常的 HTML 标签。因为&amp;lt;!doctype&amp;gt;本质上不是标签，更像一个处理指令。
&amp;lt;!DOCTYPE html&amp;gt;   &amp;lt;html&amp;gt;标签是网页的顶层容器，也称为根元素（root element），其他元素都是它的子元素。一个网页只能有一个&amp;lt;html&amp;gt;标签。该标签的 lang 属性，表示网页内容默认的语言,可以把 en 改成 zh-CN。
&amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt;&amp;lt;/html&amp;gt;   &amp;lt;head&amp;gt;标签是一个容器标签，用于放置网页的元信息。它的内容不会出现在网页上，而是为网页渲染做准备。&amp;lt;head&amp;gt;是&amp;lt;html&amp;gt;的第一个子元素。如果网页不包含&amp;lt;head&amp;gt;，浏览器会自动创建一个。&amp;lt;meta&amp;gt; 标签用于设置或说明网页的元数据，必须放在&amp;lt;head&amp;gt;里面。一个&amp;lt;meta&amp;gt;标签就是一项元数据，网页可以有多个&amp;lt;meta&amp;gt;。
下面代码声明，网页为 UTF-8 编码。虽然可以使用其他的编码方式，但基本上都采用 UTF-8。注意，声明的编码方式，应该与网页实际的编码方式一致，即声明了 UTF-8，网页就应该使用 UTF-8 编码保存。
&amp;lt;meta charset=&amp;#34;utf-8&amp;#34; /&amp;gt; 下面代码声明禁用缩放，用于兼容手机。</description>
    </item>
    
    <item>
      <title>用 hugo 搭建个人博客</title>
      <link>https://qiujia236.github.io/posts/%E6%B7%BB%E5%8A%A0hugo%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 30 Dec 2019 13:39:13 +0800</pubDate>
      
      <guid>https://qiujia236.github.io/posts/%E6%B7%BB%E5%8A%A0hugo%E5%8D%9A%E5%AE%A2/</guid>
      <description>如何使用 hugo 搭建个人博客   下载 hugo，到https://github.com/gohugoio/hugo/releases 下载 hugo_0.62.0_Windows-64bit.zip，解压，将 hugo.exe 放到个人目录里面，并且设置环境变量，path 为你的个人目录路径,安装完成后使用 hugo version 检测 hugo 是否安装成功，如果出现 Hugo Static Site Generator v0.62.0-6608F155 windows/amd64 BuildDate: 2019-12-23T10:26:18Z 的字样，则表明安装成功；
  使用 hugo new site xxx 创建一个 hugo 站点，其中 xxx 为站点的名字；
  添加主题，使用 cmder 软件输入 cd xxx 命令进入站点，在站点里面输入 git init 和 git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke 两条命令获取主题，最后输入 echo &amp;lsquo;theme = &amp;ldquo;ananke&amp;rdquo;&amp;rsquo; &amp;raquo; config.toml 添加主题，在 config.toml 中可以修改相关配置，例如你的标题，你的语言编码，还有 URL，其中 URL 必须为你的域名，比如 xxx.github.io 域名； !(/images/toml.png)</description>
    </item>
    
  </channel>
</rss>